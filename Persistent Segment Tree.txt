// Update in an index
#include <bits/stdc++.h>

using namespace std;

#define INF 0x3f3f3f3f
#define MAX  100005

int arr[MAX];

struct node {
    node *left, *right;
    int val;
    node(int a = 0, node *b = NULL, node *c = NULL) {
        val = a;
        left = b;
        right = c;
    }

    void build(int l, int r)
    {
        if(l == r) {
            val = arr[l];
            return;
        }
        left = new node();
        right = new node();
        int mid = (l+r)>>1;
        left->build(l,mid);
        right->build(mid+1,r);
        val = left->val + right->val;
    }

    node *update(int l, int r, int idx,int v)
    {
        if(r < idx || l > idx)
            return this;
        if(l == r) {
            node *ret = new node(val,left,right);
            ret->val += v;
            return ret;
        }
        int mid = (l+r)>>1;
        node *ret = new node();
        ret->left = left->update(l,mid,idx,v);
        ret->right = right->update(mid+1,r,idx,v);
        ret->val = ret->left->val + ret->right->val;
        return ret;
    }

    int query(int l, int r,int i, int j)
    {
        if(l > j || r < i)
            return 0;
        if(l >= i && r <= j)
            return val;
        int mid = (l+r)>>1;
        int p = left->query(l,mid,i,j);
        int q = right->query(mid+1,r,i,j);
        return p+q;
    }


}*root[MAX];


int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n, q, type, ver, l, r, pos, v;
    scanf("%d",&n);
    for(int i = 1; i <= n; i++)
        scanf("%d",&arr[i]);
    scanf("%d",&q);
    root[0] = new node();
    root[0]->build(1,n);
    int cntOfVer1 = 0;
    while(q--) {
        scanf("%d",&type);
        if(type == 1) {
            scanf("%d %d %d",&ver,&pos,&v);
            cntOfVer1++;
            root[cntOfVer1] = root[ver]->update(1,n,pos,v);
        }
        else {
            scanf("%d %d %d",&ver, &l, &r);
            int res = root[ver]->query(1,n,l,r);
            printf("%d\n",res);
        }
    }

}
