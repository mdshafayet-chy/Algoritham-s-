/*#include<iostream>
using namespace std;
#define max_size 101

class Queue {
private :
	int A[max_size];
	int front, rear;
public:
	Queue() {
		front = -1;
		rear = -1;
	}

	bool Isempty() {
		if (front == -1 && rear == -1) return true;
		else
			return  false;
	}

	bool Isfull() {
		return (rear + 1) % max_size == front ? true : false;
	}

	void Enqueue(int x) {
		cout << "Enqueuing " << x << endl;
		if (Isfull()) {
			cout << "Error:Queue is full " << endl;
		}
		if (Isempty()) {
			front = rear = 0;
		}
		else
			rear = (rear + 1) % max_size;

		A[rear] = x;
	}

	void Dequeue() {
		cout << "Dequeuing \n";
		if (Isempty()) {
			cout<< "Error: Queue is Empty\n";
			return;
		}
		else if (rear == front) {
			rear = front = -1;
		}
		else {
			front = (front + 1) % max_size;
		}
	}

	int Front() {
		if (front == -1) {
			cout << "Error: cannot return front from empty queue\n";
			return -1;
		}
		return A[front];
	}

	void print() {

		int count = (rear + max_size - front) % max_size + 1;
		cout << "Queue is :";
		for (int i = 0;i < count;i++) {
			int index = (front + i) % max_size;
			cout << A[index] << " ";

		}
		cout << "\n\n";
	}

};

int main()
{

	Queue Q;  
	Q.Enqueue(2);  Q.print();
	Q.Enqueue(4);  Q.print();
	Q.Enqueue(6);  Q.print();
	Q.Dequeue();   Q.print();
	Q.Enqueue(8);  Q.print();
}*/