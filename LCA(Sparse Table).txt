#include <bits/stdc++.h>

using namespace std;

#define INF 0x3f3f3f3f
#define MAX  100005

int table[MAX][22];
int par[MAX];
int level[MAX];
vector<int> adj[MAX];
int n;

void dfs(int u, int from)
{
    int len = adj[u].size();
    par[u] = from;
    for(int i = 0; i < len; i++) {
        int v = adj[u][i];
        if(v != from) {
            level[v] = level[u]+1;
            dfs(v,u);
        }
    }
}

void lca_init()
{
    memset(table,-1,sizeof(table));
    for(int i = 1; i <= n; i++)
        table[i][0] = par[i];
    for(int j = 1; (1<<j) < n; j++) {
        for(int i = 1; i <= n; i++) {
            if(table[i][j-1] != -1)
                table[i][j] = table[table[i][j-1]][j-1];
        }
    }
}

int lca_query(int p, int q)
{
    int temp;
    if(level[p] < level[q]){
        temp = p;
        p = q;
        q = temp;
    }
    int log = 1;
    while(1) {
        temp = log+1;
        if((1<<temp) > level[p])
            break;
        log++;
    }

    for(int i = log; i >= 0; i--) {
        if(level[p] - (1<<i) >= level[q]) // bringing p & q on same level
            p = table[p][i];
    }
    if(p == q)
        return p;
    for(int i = log; i >= 0; i--) {
        if(table[p][i] != -1 && table[p][i] != table[q][i]) {
            p = table[p][i];
            q = table[q][i];
        }
    }
    return par[p];
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int e, q, u, v;
    scanf("%d %d",&n, &e);
    while(e--) {
        scanf("%d %d",&u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,-1);
    lca_init();
    scanf("%d",&q);
    while(q--) {
        scanf("%d %d",&u,&v);
        printf("LCA of %d %d is ---> %d\n",u,v,lca_query(u,v));
    }
}
