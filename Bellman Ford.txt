void solve() 
{
    vector<int> d (n, INF);
    d[v] = 0; // source distance = 0
    vector<int> p (n - 1);
    int x;
    for (int i=0; i<n; ++i) 
    {
        x = -1;
        for (int j=0; j<m; ++j)
            if (d[e[j].a] < INF) // if we don't need the cost we don't need to check it. if graph is not connected then then we can't find the all the cycle form one source
                if (d[e[j].b] > d[e[j].a] + e[j].cost) 
                {
                    d[e[j].b] = max (-INF, d[e[j].a] + e[j].cost);
                    p[e[j].b] = e[j].a;
                    x = e[j].b; // to detect negative cycle
                }
    }

    if (x == -1)
        cout << "No negative cycle from " << v;
    else 
    {
        int y = x;
        for (int i=0; i<n; ++i)
            y = p[y];

        vector<int> path;
        for (int cur=y; ; cur=p[cur]) 
        {
            path.push_back (cur);
            if (cur == y && path.size() > 1)  
                break;
        }
        reverse (path.begin(), path.end());

        cout << "Negative cycle: ";
        for (size_t i=0; i<path.size(); ++i)
            cout << path[i] << ' ';
    }
}